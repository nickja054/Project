const express = require('express');
const router = express.Router();
const db = require('../database'); // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏£‡∏´‡∏±‡∏™ 4 ‡∏´‡∏•‡∏±‡∏Å
const generateCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
};

// üìå **API ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment2**
router.post('/dailymembers', async (req, res) => {
    const { name } = req.body;
    const amount = 100; // ‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 100 ‡∏ö‡∏≤‡∏ó
    const code = generateCode();
    const uses_remaining = 2; // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    const date = new Date().toISOString().split('T')[0]; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    if (!name) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠!' });
    }

    try {
        const sql = `INSERT INTO Dailymembers (name, amount, code, uses_remaining, date) VALUES (?, ?, ?, ?, ?)`;
        await db.query(sql, [name, amount, code, uses_remaining, date]);

        res.status(201).json({
            message: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            code: code,
            uses_remaining: uses_remaining,
        });
    } catch (error) {
        console.error('Error processing payment:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
});

// üìå **API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ**
router.get('/dailymembers', async (req, res) => {
    try {
        const [rows] = await db.query(`SELECT * FROM Dailymembers WHERE uses_remaining > 0`);
        res.json(rows);
    } catch (error) {
        console.error('Error fetching data:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
});

// üìå **API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™ (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á)**
router.post('/dailymembers/use-code', async (req, res) => {
    const { code } = req.body;

    if (!code) {
        return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™!' });
    }

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        const [rows] = await db.query(`SELECT * FROM Dailymembers WHERE code = ? AND uses_remaining > 0`, [code]);

        if (rows.length === 0) {
            return res.status(400).json({ error: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!' });
        }

        // ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        await db.query(`UPDATE Dailymembers SET uses_remaining = uses_remaining - 1 WHERE code = ?`, [code]);

        res.json({ message: '‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', remaining: rows[0].uses_remaining - 1 });
    } catch (error) {
        console.error('Error updating code usage:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™' });
    }
});

// üìå **API ‡∏•‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß**
router.delete('/dailymembers/cleanup', async (req, res) => {
    try {
        await db.query(`DELETE FROM Dailymembers WHERE uses_remaining = 0`);
        res.json({ message: '‡∏•‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' });
    } catch (error) {
        console.error('Error deleting expired codes:', error);
        res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }
});

module.exports = router;
